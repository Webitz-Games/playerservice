package main

import (
	"flag"
	"fmt"
	"github.com/caarlos0/env"
	"github.com/emicklei/go-restful/v3"
	"github.com/sirupsen/logrus"
	"go.mongodb.org/mongo-driver/mongo"
	"net/http"
	"os"
	_ "playerapi/cmd/player/docs" // docs is generated by Swag CLI, you have to import it.
	"playerapi/pkg/config"
	"playerapi/pkg/player/api"
	"playerapi/pkg/player/requesthandlers"
	"playerapi/pkg/service"
	"playerapi/pkg/session"
	"playerapi/pkg/utils/database"
)

const (
	serviceName = "Webitz Player Service"
)

// @title Orders API
// @version 1.0
// @description This is a sample serice for managing orders
// @termsOfService http://swagger.io/terms/
// @contact.name API Support
// @contact.email soberkoder@swagger.io
// @license.name Apache 2.0
// @license.url http://www.apache.org/licenses/LICENSE-2.0.html
// @host localhost:8080
// @BasePath /

func main() {

	configuration := parseConfiguration()
	parseCommandLine(configuration)

	mongoClient, err := database.NewMongoClient(configuration)
	if err != nil {
		logrus.Fatalf("unable to create MongoDB client: %s", err)
	}

	playerService := createService(configuration, mongoClient)

	api.RegisterRoutes(configuration.BasePath, serviceName, playerService)

	logrus.Info(serviceName + " is running with base path: " + configuration.BasePath + " on port: " + configuration.Port)
	err = http.ListenAndServe("0.0.0.0:"+configuration.Port, restful.DefaultContainer)
	logrus.Fatal(err)
}

func createService(configuration *config.Config, mongoClient *mongo.Client) *service.PlayerService {
	sessionService := session.New(mongoClient, configuration)
	requestHandlers := requesthandlers.MakeRequestHandlers(mongoClient, configuration, sessionService)
	return service.New(configuration, serviceName, requestHandlers)
}

func parseConfiguration() *config.Config {
	configuration := &config.Config{}

	err := env.Parse(configuration)
	if err != nil {
		logrus.Fatal("unable to parse environment variables: ", err)
	}
	return configuration
}

func parseCommandLine(configuration *config.Config) {
	flag.Usage = func() {
		flag.CommandLine.SetOutput(os.Stdout)
		for _, val := range configuration.HelpDocs() {
			fmt.Println(val)
		}
		fmt.Println("")
		flag.PrintDefaults()
	}
	flag.Parse()
}
